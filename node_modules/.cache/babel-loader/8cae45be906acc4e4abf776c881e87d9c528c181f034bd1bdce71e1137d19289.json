{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Let's play a game!\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Chuck Norris Jokes\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"card-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_myHeader = _resolveComponent(\"myHeader\");\n  const _component_RandomQuote = _resolveComponent(\"RandomQuote\");\n  const _component_GameAnswer = _resolveComponent(\"GameAnswer\");\n  const _component_ChuckQuote = _resolveComponent(\"ChuckQuote\");\n  const _component_myFooter = _resolveComponent(\"myFooter\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_myHeader)]), _createElementVNode(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getRandomQuote && $options.getRandomQuote(...args))\n  }, \"Get Quote\"), $data.RandomQuote ? (_openBlock(), _createBlock(_component_RandomQuote, {\n    key: 0,\n    quote: $data.RandomQuote\n  }, null, 8 /* PROPS */, [\"quote\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.answer = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.answer]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.checkAnswer && $options.checkAnswer(...args))\n  }, \"Get Answer\"), $data.showResult ? (_openBlock(), _createBlock(_component_GameAnswer, {\n    key: 0,\n    answer: $data.result\n  }, null, 8 /* PROPS */, [\"answer\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.getChuckQuote && $options.getChuckQuote(...args))\n  }, \"Get Quote\"), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.chunkedQuotes, (quote, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"card\"\n    }, [_createVNode(_component_ChuckQuote, {\n      quote: quote,\n      author: \"Chuck Norris\"\n    }, null, 8 /* PROPS */, [\"quote\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" <div>\\n    <h1>Donald Trump Jokes</h1>\\n    <button @click=\\\"getTrumpQuote\\\">Get Quote</button>\\n    <TrumpQuote v-if=\\\"TrumpQuote\\\" :quote=\\\"TrumpQuote\\\" author=\\\"Donald Trump\\\" />\\n  </div> \"), _createElementVNode(\"div\", null, [_createVNode(_component_myFooter)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAMIA,oBAA2B,YAAvB,oBAAkB;gCAYtBA,oBAA2B,YAAvB,oBAAkB;;EAEjBC,KAAK,EAAC;AAAgB;;;;;;;6DAnB7BD,oBAEM,cADJE,aAAYC,wBAGdH,oBAIM,cAHJI,UAA2B,EAC3BJ,oBAAkD;IAAzCK,OAAK,yCAAEC,2DAAc;KAAE,WAAS,GACtBC,iBAAW,kBAA9BC,aAAuDC;;IAAtBC,KAAK,EAAEH;6EAG1CP,oBAIM,8BAHJA,oBAAsC;IAA/BW,IAAI,EAAC,MAAM;+DAAUJ,YAAM;iDAANA,YAAM,KAClCP,oBAAgD;IAAvCK,OAAK,yCAAEC,qDAAW;KAAE,YAAU,GACrBC,gBAAU,kBAA5BC,aAAiDI;;IAAlBC,MAAM,EAAEN;8EAGzCP,oBAQM,cAPJc,UAA2B,EAC3Bd,oBAAiD;IAAxCK,OAAK,yCAAEC,yDAAa;KAAE,WAAS,GACxCN,oBAIM,OAJNe,UAIM,sBAHJC,oBAEMC,6BAFwBX,sBAAa,GAA9BI,KAAK,EAAEQ,KAAK;yBAAzBF,oBAEM;MAFwCG,GAAG,EAAED,KAAK;MAAEjB,KAAK,EAAC;QAC9DC,aAAmDkB;MAAtCV,KAAK,EAAEA,KAAK;MAAEW,MAAM,EAAC;;sCAKxCC,wNAIU,EAEVtB,oBAEM,cADJE,aAAYqB","names":["_createElementVNode","class","_createVNode","_component_myHeader","_hoisted_1","onClick","$options","$data","_createBlock","_component_RandomQuote","quote","type","_component_GameAnswer","answer","_hoisted_2","_hoisted_3","_createElementBlock","_Fragment","index","key","_component_ChuckQuote","author","_createCommentVNode","_component_myFooter"],"sourceRoot":"","sources":["/Users/aureliendroissart/Documents/IMAC/WEB/webproject/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <myHeader />\n  </div>\n\n  <div>\n    <h1>Let's play a game!</h1>\n    <button @click=\"getRandomQuote\">Get Quote</button>\n    <RandomQuote v-if=\"RandomQuote\" :quote=\"RandomQuote\" />\n  </div>\n\n  <div>\n    <input type=\"text\" v-model=\"answer\" />\n    <button @click=\"checkAnswer\">Get Answer</button>\n    <GameAnswer v-if=\"showResult\" :answer=\"result\" />\n  </div>\n\n  <div>\n    <h1>Chuck Norris Jokes</h1>\n    <button @click=\"getChuckQuote\">Get Quote</button>\n    <div class=\"card-container\">\n      <div v-for=\"(quote, index) in chunkedQuotes\" :key=\"index\" class=\"card\">\n        <ChuckQuote :quote=\"quote\" author=\"Chuck Norris\" />\n      </div>\n    </div>\n  </div>\n\n  <!-- <div>\n    <h1>Donald Trump Jokes</h1>\n    <button @click=\"getTrumpQuote\">Get Quote</button>\n    <TrumpQuote v-if=\"TrumpQuote\" :quote=\"TrumpQuote\" author=\"Donald Trump\" />\n  </div> -->\n\n  <div>\n    <myFooter />\n  </div>\n</template>\n\n<script>\nimport ChuckQuote from \"./components/ChuckQuote.vue\";\n// import TrumpQuote from \"./components/TrumpQuote.vue\";\nimport RandomQuote from \"./components/RandomQuote.vue\";\nimport getChuckNorrisQuote from \"@/service/ChuckNorrisAPI\";\nimport getDonaldTrumpQuote from \"@/service/DonaldTrumpAPI\";\nimport GameAnswer from \"./components/GameAnswer.vue\";\nimport myHeader from \"./components/myHeader.vue\";\nimport myFooter from \"./components/myFooter.vue\";\n\nexport default {\n  components: {\n    RandomQuote,\n    ChuckQuote,\n    // TrumpQuote,\n    GameAnswer,\n    myHeader,\n    myFooter,\n  },\n  data() {\n    return {\n      ChuckQuoteData: \"\",\n      // TrumpQuote: \"\",\n      RandomQuote: \"\",\n      RandomAuthor: \"\",\n      result: \"\",\n      answer: \"\",\n      showResult: false,\n      choix: \"trump\",\n    };\n  },\n\n  computed: {\n    chunkedQuotes() {\n      // Chunk the quotes array into groups of four\n      return this.chuckQuotes.reduce((resultArray, item, index) => {\n        const chunkIndex = Math.floor(index / 4);\n        if (!resultArray[chunkIndex]) {\n          resultArray[chunkIndex] = [];\n        }\n        resultArray[chunkIndex].push(item);\n        return resultArray;\n      }, []);\n    },\n  },\n\n  methods: {\n    async getChuckQuote() {\n      this.ChuckQuoteData = await getChuckNorrisQuote();\n    },\n\n    // async getTrumpQuote() {\n    //   this.TrumpQuote = await getDonaldTrumpQuote();\n    // },\n\n    async getRandomQuote() {\n      const randomNum = Math.random();\n      if (randomNum < 0.5) {\n        this.RandomQuote = await getDonaldTrumpQuote();\n        this.RandomAuthor = \"Donald Trump\";\n      } else {\n        this.RandomQuote = await getChuckNorrisQuote();\n        this.RandomAuthor = \"Chuck Norris\";\n      }\n    },\n    checkAnswer() {\n      const author = this.RandomAuthor;\n      const answer = this.answer.trim();\n      if (answer.toLowerCase() === author.toLowerCase()) {\n        this.result = \"Correct!\";\n      } else {\n        this.result = `Wrong! It was said by ${author}`;\n      }\n      this.showResult = true;\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n.card {\n  width: calc(50% - 10px);\n  margin-bottom: 20px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n@media (min-width: 768px) {\n  .card {\n    width: calc(25% - 10px);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}