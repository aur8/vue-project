{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, createVNode as _createVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"random-gallery\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Let's play a game!\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_RandomQuote = _resolveComponent(\"RandomQuote\");\n  const _component_GameAnswer = _resolveComponent(\"GameAnswer\");\n  const _component_ScoreGallery = _resolveComponent(\"ScoreGallery\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getRandomQuote && $options.getRandomQuote(...args))\n  }, \"Get Quote\"), $data.RandomQuote ? (_openBlock(), _createBlock(_component_RandomQuote, {\n    key: 0,\n    quote: $data.RandomQuote\n  }, null, 8 /* PROPS */, [\"quote\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.answer = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.answer]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.checkAnswer && $options.checkAnswer(...args))\n  }, \"Get Answer\"), $data.showResult ? (_openBlock(), _createBlock(_component_GameAnswer, {\n    key: 0,\n    answer: $data.result\n  }, null, 8 /* PROPS */, [\"answer\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_createVNode(_component_ScoreGallery, {\n    onScoreUpdated: $options.updateScore\n  }, null, 8 /* PROPS */, [\"onScoreUpdated\"])])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAgB;gCAEvBC,oBAA2B,YAAvB,oBAAkB;;;;;;uBAF1BC,oBAcM,OAdNC,UAcM,GAbJF,oBAIM,cAHJG,UAA2B,EAC3BH,oBAAkD;IAAzCI,OAAK,yCAAEC,2DAAc;KAAE,WAAS,GACtBC,iBAAW,kBAA9BC,aAAuDC;;IAAtBC,KAAK,EAAEH;6EAE1CN,oBAIM,8BAHJA,oBAAsC;IAA/BU,IAAI,EAAC,MAAM;+DAAUJ,YAAM;iDAANA,YAAM,KAClCN,oBAAgD;IAAvCI,OAAK,yCAAEC,qDAAW;KAAE,YAAU,GACrBC,gBAAU,kBAA5BC,aAAiDI;;IAAlBC,MAAM,EAAEN;8EAEzCN,oBAEM,cADJa,aAAiDC;IAA9BC,cAAa,EAAEV;EAAW","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","onClick","$options","$data","_createBlock","_component_RandomQuote","quote","type","_component_GameAnswer","answer","_createVNode","_component_ScoreGallery","onScoreUpdated"],"sourceRoot":"","sources":["/Users/aureliendroissart/Documents/IMAC/WEB/webproject/src/components/RandomGame.vue"],"sourcesContent":["<template>\n  <div class=\"random-gallery\">\n    <div>\n      <h1>Let's play a game!</h1>\n      <button @click=\"getRandomQuote\">Get Quote</button>\n      <RandomQuote v-if=\"RandomQuote\" :quote=\"RandomQuote\" />\n    </div>\n    <div>\n      <input type=\"text\" v-model=\"answer\" />\n      <button @click=\"checkAnswer\">Get Answer</button>\n      <GameAnswer v-if=\"showResult\" :answer=\"result\" />\n    </div>\n    <div>\n      <ScoreGallery v-on:score-updated=\"updateScore\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport GameAnswer from \"./GameAnswer.vue\";\nimport RandomQuote from \"./RandomQuote.vue\";\nimport getChuckNorrisQuote from \"@/service/ChuckNorrisAPI\";\nimport getDonaldTrumpQuote from \"@/service/DonaldTrumpAPI\";\nimport ScoreGallery from \"./ScoreGallery.vue\";\n\nexport default {\n  name: \"RandomGame\",\n\n  components: {\n    RandomQuote,\n    GameAnswer,\n    ScoreGallery,\n  },\n\n  data() {\n    return {\n      RandomQuote: \"\",\n      RandomAuthor: \"\",\n      result: \"\",\n      answer: \"\",\n      showResult: false,\n      score: 0,\n    };\n  },\n\n  methods: {\n    async getRandomQuote() {\n      const randomNum = Math.random();\n      if (randomNum < 0.5) {\n        this.RandomQuote = await getDonaldTrumpQuote();\n        this.RandomAuthor = \"Donald Trump\";\n      } else {\n        this.RandomQuote = await getChuckNorrisQuote();\n        this.RandomAuthor = \"Chuck Norris\";\n      }\n    },\n    checkAnswer() {\n      const author = this.RandomAuthor;\n      const answer = this.answer.trim();\n      if (answer.toLowerCase() === author.toLowerCase()) {\n        this.result = \"Correct!\";\n        this.score += 1;\n        localStorage.setItem(\"score\", this.score);\n        this.$emit(\"score-updated\", this.score);\n      } else {\n        this.result = `Wrong! It was said by ${author}`;\n      }\n      this.showResult = true;\n    },\n    updateScore(updatedScore) {\n      this.score = updatedScore;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}