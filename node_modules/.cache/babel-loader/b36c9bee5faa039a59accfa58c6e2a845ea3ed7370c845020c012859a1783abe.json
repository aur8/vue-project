{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ChuckQuote from \"./components/ChuckQuote.vue\";\n// import TrumpQuote from \"./components/TrumpQuote.vue\";\nimport RandomQuote from \"./components/RandomQuote.vue\";\nimport getChuckNorrisQuote from \"@/service/ChuckNorrisAPI\";\nimport getDonaldTrumpQuote from \"@/service/DonaldTrumpAPI\";\nimport GameAnswer from \"./components/GameAnswer.vue\";\nimport myHeader from \"./components/myHeader.vue\";\nimport myFooter from \"./components/myFooter.vue\";\nexport default {\n  components: {\n    RandomQuote,\n    ChuckQuote,\n    // TrumpQuote,\n    GameAnswer,\n    myHeader,\n    myFooter\n  },\n  data() {\n    return {\n      ChuckQuoteData: \"\",\n      // TrumpQuote: \"\",\n      RandomQuote: \"\",\n      RandomAuthor: \"\",\n      result: \"\",\n      answer: \"\",\n      showResult: false,\n      choix: \"trump\"\n    };\n  },\n  computed: {\n    chunkedQuotes() {\n      // Chunk the quotes array into groups of four\n      return this.chuckQuotes.reduce((resultArray, item, index) => {\n        const chunkIndex = Math.floor(index / 4);\n        if (!resultArray[chunkIndex]) {\n          resultArray[chunkIndex] = [];\n        }\n        resultArray[chunkIndex].push(item);\n        return resultArray;\n      }, []);\n    }\n  },\n  methods: {\n    async getChuckQuote() {\n      this.ChuckQuoteData = await getChuckNorrisQuote();\n    },\n    // async getTrumpQuote() {\n    //   this.TrumpQuote = await getDonaldTrumpQuote();\n    // },\n\n    async getRandomQuote() {\n      const randomNum = Math.random();\n      if (randomNum < 0.5) {\n        this.RandomQuote = await getDonaldTrumpQuote();\n        this.RandomAuthor = \"Donald Trump\";\n      } else {\n        this.RandomQuote = await getChuckNorrisQuote();\n        this.RandomAuthor = \"Chuck Norris\";\n      }\n    },\n    checkAnswer() {\n      const author = this.RandomAuthor;\n      const answer = this.answer.trim();\n      if (answer.toLowerCase() === author.toLowerCase()) {\n        this.result = \"Correct!\";\n      } else {\n        this.result = `Wrong! It was said by ${author}`;\n      }\n      this.showResult = true;\n    }\n  }\n};","map":{"version":3,"mappings":";AAuCA,OAAOA,UAAS,MAAO,6BAA6B;AACpD;AACA,OAAOC,WAAU,MAAO,8BAA8B;AACtD,OAAOC,mBAAkB,MAAO,0BAA0B;AAC1D,OAAOC,mBAAkB,MAAO,0BAA0B;AAC1D,OAAOC,UAAS,MAAO,6BAA6B;AACpD,OAAOC,QAAO,MAAO,2BAA2B;AAChD,OAAOC,QAAO,MAAO,2BAA2B;AAEhD,eAAe;EACbC,UAAU,EAAE;IACVN,WAAW;IACXD,UAAU;IACV;IACAI,UAAU;IACVC,QAAQ;IACRC;EACF,CAAC;EACDE,IAAI,GAAG;IACL,OAAO;MACLC,cAAc,EAAE,EAAE;MAClB;MACAR,WAAW,EAAE,EAAE;MACfS,YAAY,EAAE,EAAE;MAChBC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EAEDC,QAAQ,EAAE;IACRC,aAAa,GAAG;MACd;MACA,OAAO,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC,CAACC,WAAW,EAAEC,IAAI,EAAEC,KAAK,KAAK;QAC3D,MAAMC,UAAS,GAAIC,IAAI,CAACC,KAAK,CAACH,KAAI,GAAI,CAAC,CAAC;QACxC,IAAI,CAACF,WAAW,CAACG,UAAU,CAAC,EAAE;UAC5BH,WAAW,CAACG,UAAU,IAAI,EAAE;QAC9B;QACAH,WAAW,CAACG,UAAU,CAAC,CAACG,IAAI,CAACL,IAAI,CAAC;QAClC,OAAOD,WAAW;MACpB,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC;EAEDO,OAAO,EAAE;IACP,MAAMC,aAAa,GAAG;MACpB,IAAI,CAAClB,cAAa,GAAI,MAAMP,mBAAmB,EAAE;IACnD,CAAC;IAED;IACA;IACA;;IAEA,MAAM0B,cAAc,GAAG;MACrB,MAAMC,SAAQ,GAAIN,IAAI,CAACO,MAAM,EAAE;MAC/B,IAAID,SAAQ,GAAI,GAAG,EAAE;QACnB,IAAI,CAAC5B,WAAU,GAAI,MAAME,mBAAmB,EAAE;QAC9C,IAAI,CAACO,YAAW,GAAI,cAAc;MACpC,OAAO;QACL,IAAI,CAACT,WAAU,GAAI,MAAMC,mBAAmB,EAAE;QAC9C,IAAI,CAACQ,YAAW,GAAI,cAAc;MACpC;IACF,CAAC;IACDqB,WAAW,GAAG;MACZ,MAAMC,MAAK,GAAI,IAAI,CAACtB,YAAY;MAChC,MAAME,MAAK,GAAI,IAAI,CAACA,MAAM,CAACqB,IAAI,EAAE;MACjC,IAAIrB,MAAM,CAACsB,WAAW,EAAC,KAAMF,MAAM,CAACE,WAAW,EAAE,EAAE;QACjD,IAAI,CAACvB,MAAK,GAAI,UAAU;MAC1B,OAAO;QACL,IAAI,CAACA,MAAK,GAAK,yBAAwBqB,MAAO,EAAC;MACjD;MACA,IAAI,CAACnB,UAAS,GAAI,IAAI;IACxB;EACF;AACF,CAAC","names":["ChuckQuote","RandomQuote","getChuckNorrisQuote","getDonaldTrumpQuote","GameAnswer","myHeader","myFooter","components","data","ChuckQuoteData","RandomAuthor","result","answer","showResult","choix","computed","chunkedQuotes","chuckQuotes","reduce","resultArray","item","index","chunkIndex","Math","floor","push","methods","getChuckQuote","getRandomQuote","randomNum","random","checkAnswer","author","trim","toLowerCase"],"sourceRoot":"","sources":["/Users/aureliendroissart/Documents/IMAC/WEB/webproject/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <myHeader />\n\n    <div>\n      <h1>Let's play a game!</h1>\n      <button @click=\"getRandomQuote\">Get Quote</button>\n      <RandomQuote v-if=\"RandomQuote\" :quote=\"RandomQuote\" />\n    </div>\n\n    <div>\n      <input type=\"text\" v-model=\"answer\" />\n      <button @click=\"checkAnswer\">Get Answer</button>\n      <GameAnswer v-if=\"showResult\" :answer=\"result\" />\n    </div>\n\n    <div>\n      <h1>Chuck Norris Jokes</h1>\n      <button @click=\"getChuckQuote\">Get Quote</button>\n      <div class=\"card-container\">\n        <div v-for=\"(quote, index) in chunkedQuotes\" :key=\"index\" class=\"card\">\n          <ChuckQuote :quote=\"quote\" author=\"Chuck Norris\" />\n        </div>\n      </div>\n    </div>\n\n    <!-- <div>\n      <h1>Donald Trump Jokes</h1>\n      <button @click=\"getTrumpQuote\">Get Quote</button>\n      <TrumpQuote v-if=\"TrumpQuote\" :quote=\"TrumpQuote\" author=\"Donald Trump\" />\n    </div> -->\n\n    <div>\n      <myFooter />\n    </div>\n  </div>\n</template>\n\n<script>\nimport ChuckQuote from \"./components/ChuckQuote.vue\";\n// import TrumpQuote from \"./components/TrumpQuote.vue\";\nimport RandomQuote from \"./components/RandomQuote.vue\";\nimport getChuckNorrisQuote from \"@/service/ChuckNorrisAPI\";\nimport getDonaldTrumpQuote from \"@/service/DonaldTrumpAPI\";\nimport GameAnswer from \"./components/GameAnswer.vue\";\nimport myHeader from \"./components/myHeader.vue\";\nimport myFooter from \"./components/myFooter.vue\";\n\nexport default {\n  components: {\n    RandomQuote,\n    ChuckQuote,\n    // TrumpQuote,\n    GameAnswer,\n    myHeader,\n    myFooter,\n  },\n  data() {\n    return {\n      ChuckQuoteData: \"\",\n      // TrumpQuote: \"\",\n      RandomQuote: \"\",\n      RandomAuthor: \"\",\n      result: \"\",\n      answer: \"\",\n      showResult: false,\n      choix: \"trump\",\n    };\n  },\n\n  computed: {\n    chunkedQuotes() {\n      // Chunk the quotes array into groups of four\n      return this.chuckQuotes.reduce((resultArray, item, index) => {\n        const chunkIndex = Math.floor(index / 4);\n        if (!resultArray[chunkIndex]) {\n          resultArray[chunkIndex] = [];\n        }\n        resultArray[chunkIndex].push(item);\n        return resultArray;\n      }, []);\n    },\n  },\n\n  methods: {\n    async getChuckQuote() {\n      this.ChuckQuoteData = await getChuckNorrisQuote();\n    },\n\n    // async getTrumpQuote() {\n    //   this.TrumpQuote = await getDonaldTrumpQuote();\n    // },\n\n    async getRandomQuote() {\n      const randomNum = Math.random();\n      if (randomNum < 0.5) {\n        this.RandomQuote = await getDonaldTrumpQuote();\n        this.RandomAuthor = \"Donald Trump\";\n      } else {\n        this.RandomQuote = await getChuckNorrisQuote();\n        this.RandomAuthor = \"Chuck Norris\";\n      }\n    },\n    checkAnswer() {\n      const author = this.RandomAuthor;\n      const answer = this.answer.trim();\n      if (answer.toLowerCase() === author.toLowerCase()) {\n        this.result = \"Correct!\";\n      } else {\n        this.result = `Wrong! It was said by ${author}`;\n      }\n      this.showResult = true;\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n\n.card {\n  width: calc(50% - 10px);\n  margin-bottom: 20px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n@media (min-width: 768px) {\n  .card {\n    width: calc(25% - 10px);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}